<?xml version="1.0" encoding="UTF-8"?>

<!--
    _________        _____ __________________        _____
    __  ____/___________(_)______  /__  ____/______ ____(_)_______
    _  / __  __  ___/__  / _  __  / _  / __  _  __ `/__  / __  __ \
    / /_/ /  _  /    _  /  / /_/ /  / /_/ /  / /_/ / _  /  _  / / /
    \____/   /_/     /_/   \_,__/   \____/   \__,_/  /_/   /_/ /_/

    
 Copyright (C) GridGain Systems. All Rights Reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

    Version: @xml.file.version
-->

<!--
    GridGain Spring configuration file to startup grid with streamers.

    When starting a standalone GridGain node, you need to execute the following command:
    {GRIDGAIN_HOME}/bin/ggstart.{bat|sh} examples/config/example-streamer.xml
    When starting nodes this way JAR file containing the examples code
    should be placed to {GRIDGAIN_HOME}/libs folder. You can build
    gridgain-examples.jar by running "mvn package" in {GRIDGAIN_HOME}/examples folder.
    After that gridgain-examples.jar will be generated by Maven in
    {GRIDGAIN_HOME}/examples/target folder.

    When starting GridGain from Java IDE, pass path to this file into GridGain:
    GridGain.start("examples/config/example-streamer.xml");
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
        Optional description.
    -->
    <description>
        Spring file for grid configuration with benchmark.
    </description>

    <!--
        Configuration below demonstrates how to setup caches within grid nodes.
    -->
    <bean id="grid.cfg" class="org.gridgain.grid.GridConfiguration">
        <!-- Set to local host address just for examples. -->
        <property name="localHost" value="127.0.0.1"/>

        <property name="marshaller">
            <bean class="org.gridgain.grid.marshaller.optimized.GridOptimizedMarshaller">
                <!-- Set to false to allow non-serializable objects in examples, default is true. -->
                <property name="requireSerializable" value="false"/>
            </bean>
        </property>

        <!-- Streamer configurations. -->
        <property name="streamerConfiguration">
            <!--
                Specify list of streamer configurations here.
            -->
            <list>
                <!--
                    Streamer for GridStreamingRunningAverageExample.
                -->
                <bean class="org.gridgain.grid.streamer.GridStreamerConfiguration">
                    <property name="name" value="running-average"/>

                    <property name="windows">
                        <!--
                            Window size is 500, which means that we will be
                            computing running average over the last 500 events.
                        -->
                        <bean class="org.gridgain.grid.streamer.window.GridStreamerBoundedSizeWindow">
                            <property name="maximumSize" value="500"/>
                        </bean>
                    </property>

                    <property name="stages">
                        <list>
                            <bean class="org.gridgain.examples.streaming.StreamingRunningAverageExample$StreamerStage"/>
                        </list>
                    </property>

                    <property name="router">
                        <!--
                            Use random event router to execute streamer stages on random nodes
                            just for demonstration purposes.
                        -->
                        <bean class="org.gridgain.grid.streamer.router.GridStreamerRandomEventRouter"/>
                        <!--
                        <bean class="org.gridgain.grid.streamer.router.GridStreamerLocalEventRouter"/>
                        -->
                    </property>

                    <!--
                        If at-least-once is set, then we may wish to configure maximum
                        amount of concurrent sessions to prevent overloading the system.
                    -->
                    <!--
                    <property name="maximumConcurrentSessions" value="200"/>
                    <property name="atLeastOnce" value="true"/>
                    -->
                </bean>

                <!--
                    Streamer for GridStreamingPopularNumbersExample.
                -->
                <bean class="org.gridgain.grid.streamer.GridStreamerConfiguration">
                    <property name="name" value="popular-numbers"/>

                    <property name="windows">
                        <!--
                            For this example we use a running window with upper bound of 10,000 events.
                            This means that streamer will find most popular numbers among last 10,000 events.
                        -->
                        <bean class="org.gridgain.grid.streamer.window.GridStreamerBoundedSizeWindow">
                            <property name="maximumSize" value="10000"/>

                            <property name="indexes">
                                <list>
                                    <bean class="org.gridgain.grid.streamer.index.tree.GridStreamerTreeIndexProvider">
                                        <property name="updater">
                                            <bean class="org.gridgain.examples.streaming.StreamingPopularNumbersExample$IndexUpdater"/>
                                        </property>
                                    </bean>
                                </list>
                            </property>
                        </bean>
                    </property>

                    <property name="stages">
                        <list>
                            <bean class="org.gridgain.examples.streaming.StreamingPopularNumbersExample$StreamerStage"/>
                        </list>
                    </property>

                    <property name="maximumConcurrentSessions" value="200"/>

                    <property name="router">
                        <!--
                            For this example we use affinity event router to make sure that
                            identical numbers are routed to the same node. This is important
                            because we keep counters for all numbers in the stream and if
                            numbers are pushed to wrong nodes, the counters will become
                            inaccurate.
                        -->
                        <bean class="org.gridgain.grid.streamer.router.GridStreamerAffinityEventRouter"/>
                    </property>

                    <!--
                        If at-least-once is set, then we may wish to configure maximum
                        amount of concurrent sessions to prevent overloading the system.
                    -->
                    <!--
                    <property name="maximumConcurrentSessions" value="200"/>
                    <property name="atLeastOnce" value="true"/>
                    -->
                </bean>

                <!--
                    Streamer for GridStreamingOpenHighLowCloseExample.
                -->
                <bean class="org.gridgain.grid.streamer.GridStreamerConfiguration">
                    <property name="name" value="priceBars"/>

                    <property name="windows">
                        <list>
                            <!--
                                For this example we use a running batch window with upper bound of 1 second.
                                This means that streamer composes a batch with events within 1 second time interval.
                            -->
                            <bean class="org.gridgain.grid.streamer.window.GridStreamerBoundedTimeBatchWindow">
                                <property name="name" value="stage1"/>
                                <property name="batchTimeInterval" value="1000"/>
                                <property name="batchSize" value="2147483647"/>
                                <property name="maximumBatches" value="2147483647"/>
                            </bean>

                            <!--
                                For this example we use a running batch window with upper bound of 2 seconds.
                                This means that streamer composes a batch with events within 2 seconds time interval.
                            -->
                            <bean class="org.gridgain.grid.streamer.window.GridStreamerBoundedTimeBatchWindow">
                                <property name="name" value="stage2"/>
                                <property name="batchTimeInterval" value="2000"/>
                                <property name="batchSize" value="2147483647"/>
                                <property name="maximumBatches" value="2147483647"/>
                            </bean>
                        </list>
                    </property>

                    <property name="stages">
                        <list>
                            <bean class="org.gridgain.examples.streaming.StreamingPriceBarsExample$FirstStage"/>
                            <bean class="org.gridgain.examples.streaming.StreamingPriceBarsExample$SecondStage"/>
                        </list>
                    </property>

                    <property name="router">
                        <!--
                            For this example we use affinity event router to make sure that
                            quotes for identical instruments are routed to the same node.
                        -->
                        <bean class="org.gridgain.grid.streamer.router.GridStreamerAffinityEventRouter"/>
                    </property>
                </bean>

                <!--
                    Streamer for GridStreamingCheckInExample.
                -->
                <bean class="org.gridgain.grid.streamer.GridStreamerConfiguration">
                    <property name="name" value="check-in"/>

                    <property name="windows">
                        <list>
                            <!--
                                For this example we use windows with 10 seconds time interval.
                                This means that only events for last 10 seconds will be present in
                                these windows (other events are marked for eviction).
                            -->
                            <bean class="org.gridgain.grid.streamer.window.GridStreamerBoundedTimeWindow">
                                <property name="name" value="AddToWindowStage"/>
                                <property name="timeInterval" value="10000"/>

                                <!--
                                    We use a unique index to avoid repetitive check-ins in a specified period
                                    of time.
                                -->
                                <property name="indexes">
                                    <list>
                                        <bean class="org.gridgain.grid.streamer.index.hash.GridStreamerHashIndexProvider">
                                            <property name="unique" value="true"/>

                                            <property name="updater">
                                                <bean class="org.gridgain.examples.streaming.StreamingCheckInExample$CheckInEventIndexUpdater"/>
                                            </property>
                                        </bean>
                                    </list>
                                </property>
                            </bean>
                            <bean class="org.gridgain.grid.streamer.window.GridStreamerBoundedTimeWindow">
                                <property name="name" value="DetectPlacesStage"/>
                                <property name="timeInterval" value="10000"/>

                                <property name="indexes">
                                    <list>
                                        <bean class="org.gridgain.grid.streamer.index.hash.GridStreamerHashIndexProvider">
                                            <property name="unique" value="true"/>

                                            <property name="updater">
                                                <bean class="org.gridgain.examples.streaming.StreamingCheckInExample$PlacesIndexUpdater"/>
                                            </property>
                                        </bean>
                                    </list>
                                </property>
                            </bean>
                        </list>
                    </property>

                    <property name="stages">
                        <list>
                            <bean class="org.gridgain.examples.streaming.StreamingCheckInExample$AddToWindowStage"/>
                            <bean class="org.gridgain.examples.streaming.StreamingCheckInExample$DetectPlacesStage"/>
                        </list>
                    </property>
                </bean>
            </list>
        </property>

        <!-- Explicitly configure TCP discovery SPI to provide list of initial nodes. -->
        <property name="discoverySpi">
            <bean class="org.gridgain.grid.spi.discovery.tcp.GridTcpDiscoverySpi">
                <property name="ipFinder">
                    <!--
                        GridGain provides several options for automatic discovery that can be used
                        instead os static IP based discovery. For information on all options refer
                        to our documentation: http://doc.gridgain.org/latest/Automatic+Node+Discovery
                    -->
                    <!-- Uncomment multicast IP finder to enable multicast-based discovery of initial nodes. -->
                    <!--<bean class="org.gridgain.grid.spi.discovery.tcp.ipfinder.multicast.GridTcpDiscoveryMulticastIpFinder">-->
                    <bean class="org.gridgain.grid.spi.discovery.tcp.ipfinder.vm.GridTcpDiscoveryVmIpFinder">
                        <property name="addresses">
                            <list>
                                <!-- In distributed environment, replace with actual host IP address. -->
                                <value>127.0.0.1:47500..47509</value>
                            </list>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
</beans>
