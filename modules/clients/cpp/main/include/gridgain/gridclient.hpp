/* 
 Copyright (C) GridGain Systems. All Rights Reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*  _________        _____ __________________        _____
 *  __  ____/___________(_)______  /__  ____/______ ____(_)_______
 *  _  / __  __  ___/__  / _  __  / _  / __  _  __ `/__  / __  __ \
 *  / /_/ /  _  /    _  /  / /_/ /  / /_/ /  / /_/ / _  /  _  / / /
 *  \____/   /_/     /_/   \_,__/   \____/   \__,_/  /_/   /_/ /_/
 */

#ifndef GRIDCLIENT_HPP_INCLUDED
#define GRIDCLIENT_HPP_INCLUDED

#include <string>

#include <gridgain/gridconf.hpp>
#include <gridgain/gridclienttypedef.hpp>
#include <gridgain/gridclientuuid.hpp>

/**
 * C++ client API.
 */
class GRIDGAIN_API GridClient {
public:
     /**
     *
     * Destructor.
     */
    virtual ~GridClient() {};

    /**
     * Gets a unique client identifier. This identifier is generated by factory on client creation
     * and used in identification and authentication procedure on server node.
     *
     * @return Generated client id.
     */
    virtual GridClientUuid id() const = 0;

    /**
     * Gets a data projection for a default grid cache with <tt>null</tt> name.
     *
     * @return Data projection for grid cache with <tt>null</tt> name.
     * @throw GridClientException If client was closed.
     */
    virtual TGridClientDataPtr data() = 0;

    /**
     * Gets a data projection for grid cache with name <tt>cacheName</tt>. If
     * no data configuration with given name was provided at client startup, an
     * exception will be thrown.
     *
     * @param cacheName Grid cache name for which data projection should be obtained.
     * @return Data projection for grid cache with name <tt>cacheName</tt>.
     * @throw GridClientException If client was closed or no configuration with given name was provided.
     */
    virtual TGridClientDataPtr data(const std::string& cacheName) = 0;

    /**
     * Gets a default compute projection. Default compute projection will include all nodes
     * in remote grid. Selection of node that will be connected to perform operations will be
     * done according to {@link GridClientLoadBalancer} provided in client configuration or
     * according to affinity if projection call involves affinity key.
     * <p>
     * More restricted projection configurations may be created with {@link GridClientCompute} methods.
     *
     * @return Default compute projection.
     *
     * @see GridClientCompute
     */
    virtual TGridClientComputePtr compute() = 0;

    /**
     * Adds topology listener. Remote grid topology is refreshed every
     * {@link GridClientConfiguration#getTopologyRefreshFrequency()} milliseconds. If any node was added or removed,
     * a listener will be notified.
     *
     * @param lsnr Listener to add.
     */
    virtual void addTopologyListener(TGridClientTopologyListenerPtr lsnr) = 0;

    /**
     * Removes previously added topology listener.
     *
     * @param lsnr Listener to remove.
     */
    virtual void removeTopologyListener(TGridClientTopologyListenerPtr lsnr) = 0;

    /**
     * @return Copy of the topology listeners list.
     */
    virtual TGridClientTopologyListenerListPtr topologyListeners() const = 0;

};

#endif // GRIDCLIENT_HPP_INCLUDED
