<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <description>
        Base Spring file for grid configuration.
    </description>

    <bean abstract="true" id="grid.cfg" class="org.gridgain.grid.GridConfiguration">
        <property name="localHost" value="127.0.0.1"/>

        <property name="marshaller">
            <bean class="org.gridgain.grid.marshaller.optimized.GridOptimizedMarshaller">
                <property name="classNames">
                    <list>
                        <value>org.gridgain.loadtests.job.GridJobExecutionLoadTestJob</value>
                    </list>
                </property>
            </bean>
        </property>


        <!--
            Uncomment this to provide TCP discovery SPI (predefined addresses).
            Use the addresses list to provide IP addresses of initial nodes in the grid
            (at least one address must be provided).
        -->
        <property name="discoverySpi">
            <bean class="org.gridgain.grid.spi.discovery.tcp.GridTcpDiscoverySpi">
                <property name="ipFinder">
                    <bean class="org.gridgain.grid.spi.discovery.tcp.ipfinder.vm.GridTcpDiscoveryVmIpFinder">
                        <property name="addresses">
                            <list>
                                <!--
                                    List all IP/port configurations that potentially
                                    can be started first in examples. We are assuming
                                    grid of size 10 or less.
                                -->
                                <value>127.0.0.1:47500</value>
                                <value>127.0.0.1:47501</value>
                                <value>127.0.0.1:47502</value>
                                <value>127.0.0.1:47503</value>
                                <value>127.0.0.1:47504</value>
                                <value>127.0.0.1:47505</value>
                                <value>127.0.0.1:47506</value>
                                <value>127.0.0.1:47507</value>
                                <value>127.0.0.1:47508</value>
                                <value>127.0.0.1:47509</value>
                            </list>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>

        <property name="peerClassLoadingEnabled" value="false"/>

        <property name="restEnabled" value="false"/>

        <property name="cacheConfiguration">
            <list/>
        </property>

        <property name="includeEventTypes">
            <list/>
        </property>

        <property name="deploymentMode" value="SHARED"/>

        <property name="executorService">
            <bean class="org.gridgain.grid.thread.GridThreadPoolExecutor">
                <constructor-arg type="int" value="#{T(java.lang.Runtime).getRuntime().availableProcessors() / 2}"/>
                <constructor-arg type="int" value="#{T(java.lang.Runtime).getRuntime().availableProcessors() / 2}"/>
                <constructor-arg type="long">
                    <util:constant static-field="java.lang.Long.MAX_VALUE"/>
                </constructor-arg>
                <constructor-arg type="java.util.concurrent.BlockingQueue">
                    <bean class="java.util.concurrent.LinkedBlockingQueue"/>
                </constructor-arg>
            </bean>
        </property>

        <property name="systemExecutorService">
            <bean class="org.gridgain.grid.thread.GridThreadPoolExecutor">
                <constructor-arg type="int" value="#{T(java.lang.Runtime).getRuntime().availableProcessors() / 2}"/>
                <constructor-arg type="int" value="#{T(java.lang.Runtime).getRuntime().availableProcessors() / 2}"/>
                <constructor-arg type="long">
                    <util:constant static-field="java.lang.Long.MAX_VALUE"/>
                </constructor-arg>
                <constructor-arg type="java.util.concurrent.BlockingQueue">
                    <bean class="java.util.concurrent.LinkedBlockingQueue"/>
                </constructor-arg>
            </bean>
        </property>

        <property name="loadBalancingSpi">
            <bean class="org.gridgain.grid.spi.loadbalancing.roundrobin.GridRoundRobinLoadBalancingSpi">
                <property name="perTask" value="false"/>
            </bean>
        </property>
    </bean>
</beans>
